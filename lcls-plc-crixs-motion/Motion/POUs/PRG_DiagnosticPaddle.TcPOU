<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.2">
  <POU Name="PRG_DiagnosticPaddle" Id="{f770ac2d-78e5-4fa8-95e5-1ea398d39cca}" SpecialFunc="None">
    <Declaration><![CDATA[PROGRAM PRG_DiagnosticPaddle
VAR_IN_OUT
	arrTransitions : ARRAY [0..9] OF ARRAY [1..9] OF BOOL;
	
    arrOutputs: ARRAY [1..9] OF ARRAY [1..3] OF DUT_PositionState;
END_VAR
VAR_INPUT
	//arrStates	:	ARRAY [1..9] OF ENUM_DiagPaddle;	 
END_VAR
VAR_OUTPUT
END_VAR
VAR		
	bInit : BOOL := FALSE;
	
	iAxis : INT;
	
	currState : INT;
	nextState : INT;
	bXState : BOOL;
	bYState : BOOL;
	bZState : BOOL;
	arrStates: ARRAY[1..15] OF DUT_PositionState;
	{attribute 'pytmc' := '
        pv:
        io: io
    '}
    fbXStateManager: FB_PositionStateManager;
	{attribute 'pytmc' := '
        pv:
        io: io
    '}
    fbYStateManager: FB_PositionStateManager;
	{attribute 'pytmc' := '
        pv:
        io: io
    '}
    fbZStateManager: FB_PositionStateManager;
END_VAR]]></Declaration>
    <Implementation>
      <ST><![CDATA[IF NOT bInit THEN
	bInit := TRUE;
END_IF

// Determine current assembly state
currState := 0;
FOR nextState := 1 TO 9 DO // for state in naxes loop?
	bXState := F_AtPositionState(stMotionStage:=stDPX, stPositionState:=arrOutputs[nextState][1]);
	bYState := F_AtPositionState(stMotionStage:=stDPY, stPositionState:=arrOutputs[nextState][2]);
	bZState := F_AtPositionState(stMotionStage:=stDPZ, stPositionState:=arrOutputs[nextState][3]);
	IF bXState AND bYState AND bZState THEN
		currState := nextState;
	END_IF
END_FOR

// Reset logic before determining allowed moves
FOR nextState := 1 TO 9 DO // for state in states for state in axes loop?
	FOR iAxis := 1 TO 3 DO
		arrOutputs[nextState][iAxis].bMoveOk := FALSE;
	END_FOR
END_FOR

// Update motion logic for next state based on current state
FOR nextState := 1 TO 9 DO // for state in states for state in axes loop?
	IF arrTransitions[currState][nextState] THEN
		FOR iAxis :=1 TO 3 DO
			arrOutputs[nextState][iAxis].bMoveOk := TRUE;
		END_FOR
	END_IF
END_FOR
	
// for manager in managers loop?
//fbXStateManager(
//    stMotionStage := stDPX,
//    arrStates := arrStates,
//    setState := enumSet,
//    bEnable := bEnable,
//    bError => bError,
//    nErrorId => nErrorId,
//    sErrorMessage => sErrorMessage,
//    bBusy => bBusy,
//    bDone => bDone,
//    getState => enumGet); ]]></ST>
    </Implementation>
    <LineIds Name="PRG_DiagnosticPaddle">
      <LineId Id="55" Count="0" />
      <LineId Id="96" Count="0" />
      <LineId Id="79" Count="0" />
      <LineId Id="98" Count="0" />
      <LineId Id="80" Count="0" />
      <LineId Id="110" Count="0" />
      <LineId Id="99" Count="0" />
      <LineId Id="102" Count="0" />
      <LineId Id="104" Count="4" />
      <LineId Id="103" Count="0" />
      <LineId Id="121" Count="0" />
      <LineId Id="111" Count="0" />
      <LineId Id="122" Count="1" />
      <LineId Id="125" Count="1" />
      <LineId Id="124" Count="0" />
      <LineId Id="127" Count="0" />
      <LineId Id="82" Count="0" />
      <LineId Id="112" Count="1" />
      <LineId Id="116" Count="0" />
      <LineId Id="119" Count="1" />
      <LineId Id="117" Count="0" />
      <LineId Id="114" Count="0" />
      <LineId Id="83" Count="0" />
      <LineId Id="285" Count="0" />
      <LineId Id="85" Count="9" />
      <LineId Id="5" Count="0" />
    </LineIds>
  </POU>
</TcPlcObject>